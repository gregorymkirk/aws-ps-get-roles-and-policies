Param(
    [Parameter(mandatory=$true,Helpmessage="The AWS credential profile to use for authentication")] [string] $profile
   )

$Regions = "us-west-2", "us-east-1"

$WARNING = "WARNING: This script does NOT backup the key data. Key data (secrets) cannot be exported from AWS.This script is solely intended to document the existing key metadata, and provide a means to recover from a catastrophic loss."

Function Out-UTF8NoBOM {
# accepts a string containing content, and an absolute path & filename (e.g c:\mydir\myfile.txt),
# and writes a UTF-8 file with no BOM>
# if your script will only run on versions 6 or later (i.e. powershell core) then this function is not necessary, 
# but using it allows backwards compatibility with older versions of powershell.
# Out-File prior to PSversion 6 (aka powershell core) includes the BOM character at the start of UTF8 files, 
# which many programs (like Terraform) do not accept.
#
# WARNING: Function does NOT check for filename compliance (e.g reserved words, reserved characters etc) or valid paths. 
# Ref: fixing the BOM prepended to the win UTF8 file https://stackoverflow.com/questions/5596982/using-powershell-to-write-a-file-in-utf-8-without-the-bom
    Param ( [string] $Filename,
            [array] $Content
            )
     if ( $PSVersionTable.PSVersion.Major -lt 6 ){
       $File = New-Object System.Text.UTF8Encoding $False
       [system.IO.File]::WriteAllLines( $Filename, $Content, $File)
     }
     else {
     $Content|out-file -FilePath $Filename -Encoding UTF8NoBOM
     }

}

Function Main {
    write-host $WARNING

    #if the directory already exists, rename it adign the current epoch time
    if (test-path $alias){rename-item -Path $alias -NewName "$alias.$(get-date -Uformat %s)"}

    #Create Directories to hold our output code and policy docs
    $datapath = new-item -path ".\" -Name $alias -ItemType "directory"
    $KMSKeypolicypath = new-item -path ".\$alias" -Name "KMSKeyPolicyDocs" -ItemType "directory"

    write-host $datapath
    Write-Host $KMSKeypolicypath
    

    foreach ($Region in $Regions) {
        Set-DefaultAWSRegion -Region $Region
        new-item -path "$datapath" -Name "$Region" -ItemType "directory"

        #document the Aliases for the region
        $CurrentRegion = Get-DefaultAWSRegion
        $KeyAliases = Get-KMSAliasList 
        $KeyAliases|out-file -FilePath "$datapath\$Region\Aliases.txt"

        #document the key meta data and key policies for each key.
        $KeyList = Get-KMSKeyList
        foreach ($Key in $KeyList) {
            $KMSkey= Get-KMSKey -KeyId $Key.KeyId
            # per AWS documentation the only valid policy name is "default" https://docs.aws.amazon.com/powershell/latest/reference/
            $PolicyDoc = Get-KMSKeyPolicy -KeyId $kmskey.keyid -PolicyName "default"
            $keyid = $Key.KeyId
            Out-UTF8NoBOM -Filename "$KMSKeypolicypath\$KeyId.json" -Content $PolicyDoc
            #output this to a json policy doc
            #output the tf file for the Key & read in the json policy doc
            #Out-UTF8NoBOM -FileName "$datapath\$Region\$keyid.txt" -Content $KMSkey.tostring()
            $KMSkey|out-file -FilePath "$datapath\$Region\$keyid.txt"         }
    }
}


### Executon starts here ###
Try {Set-AWSCredential -ProfileName $profile}
catch { Write-Host "No match found for profile in credentials file"
        exit 1
        }

Try {  $alias = Get-IAMAccountAlias  }
catch { Write-Host "No alias returned for credentials $profile, is this profile valid?"
        exit 1
        }

Main 
